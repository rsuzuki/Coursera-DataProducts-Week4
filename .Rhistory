subCols <- cols[-length(cols)] #all but CompressiveStrength
plotCols = 2
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName){
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
par(mar = rep(2, 4))
library(Hmisc)
cols <- colnames(training)
subCols <- cols[-length(cols)] #all but CompressiveStrength
plotCols = 2
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName){
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
cols     <- colnames(training)
subCols  <- cols[-length(cols)] # Remove CompressiveStrength
plotCols <- 4
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName){
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
cols     <- colnames(training)
subCols  <- cols[-length(cols)] # Remove CompressiveStrength
plotCols <- 3
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName){
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
qplot(CompressiveStrength, Age, data = training)
qplot(Age, CompressiveStrength, data = training)
qplot(FlyAsh, CompressiveStrength, data = training)
qplot(FlyAsh, CompressiveStrength, color = Age, data = training)
qplot(Age, CompressiveStrength, color = FlyAsh, data = training)
par(mar = rep(2, 4))
cols     <- colnames(training)
subCols  <- cols[-length(cols)] # Remove CompressiveStrength
plotCols <- 3
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colname, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
+ xlab(colName)
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
ggplot(aes(training$CompressiveStrength ~ cut))
})
subCols
cut <- cut2(training[,"Age"])
cut
ggplot(aes(training$CompressiveStrength ~ cut))
training$CompressiveStrength
ggplot(aes(training$CompressiveStrength ~ cut))
ggplot(aes(training$CompressiveStrength, cut))
ggplot()
ggplot() + geom_point(aes(training$CompressiveStrength, cut))
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
#qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
ggplot() + geom_point(aes(training$CompressiveStrength, cut)) + xlab(colName)
})
ggplot() + geom_point(aes(training$CompressiveStrength, cut)) + xlab(colName)
ggplot() + geom_point(aes(training$CompressiveStrength, cut))
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
#qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
ggplot() + geom_point(aes(training$CompressiveStrength, cut)) + xlab(colName)
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
#qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
ggplot() + geom_point(aes(training$CompressiveStrength, cut)) + xlab(colName)
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
#ggplot() + geom_point(aes(training$CompressiveStrength, cut)) + xlab(colName)
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
})
cols     <- colnames(training)
subCols  <- cols[-length(cols)] # Remove CompressiveStrength
plotCols <- 3
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
qplot(training$CompressiveStrength, pch=19, col=cut, xlab=colName, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("index: col=",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("Index: ",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=colBan, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("Index: ",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
cols
cols     <- colnames(training)
subCols  <- cols[-length(cols)] # Remove CompressiveStrength
plotCols <- 3
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("Index: ",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
})
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("Index: ",colName)
plot(training$CompressiveStrength, pch=19, col=alpha(cut, 0.5), xlab=lab, ylab="CompressiveStrength")
})
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histogram(SuperPlasticizer, training)
histogram(training$Superplasticizer)
ggplot() + geom_histogram(aes(training$Superplasticizer))
ggplot() + geom_histogram(aes(training$Superplasticizer), binwidth = 20)
ggplot() + geom_histogram(aes(training$Superplasticizer), binwidth = 1)
ggplot() + geom_histogram(aes(training$Superplasticizer), bin = 10)
ggplot() + geom_histogram(aes(training$Superplasticizer), bins = 10)
ggplot() + geom_histogram(aes(training$Superplasticizer), bins = 20)
ggplot() + geom_histogram(aes(training$Superplasticizer), bins = 20, color = "red")
ggplot() + geom_histogram(aes(training$Superplasticizer), bins = 20, color = "red", fill = "darkred")
ggplot() + geom_histogram(aes(training$Superplasticizer), bins = 20, color = "darkred", fill = "red")
ggplot() + geom_histogram(aes(training$Superplasticizer), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(training$Superplasticizer), bins = 40, color = "darkred", fill = "red") +
xlab("Superplasticizer") + ylab("Count")
ggplot() +
geom_histogram(aes(log10(training$Superplasticizer), bins = 40, color = "darkred", fill = "red") +
xlab("Superplasticizer") + ylab("Count")
ggplot() +
geom_histogram(aes(training$Superplasticizer), bins = 40, color = "darkred", fill = "red") +
xlab("Superplasticizer") + ylab("Count")
ggplot() +
geom_histogram(aes(training$Superplasticizer), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(log(training$Superplasticizer), bins = 40, color = "darkred", fill = "red")
w
ggplot() +
geom_histogram(aes(log(training$Superplasticizer)), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(log10(training$Superplasticizer) + 1), bins = 40, color = "darkred", fill = "red")
summary(training$Superplasticizer)
ggplot() +
geom_histogram(aes(log10(training$Superplasticizer + 1)), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(training$Superplasticizer), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(log10(training$Superplasticizer + 1)), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(training$Superplasticizer), bins = 40, color = "darkred", fill = "red")
ggplot() +
geom_histogram(aes(log10(training$Superplasticizer + 1)), bins = 40, color = "darkred", fill = "red")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
summary(training)
colnames(training)
grep("^IL.*", "ILvdf")
grep("^IL.*", c("ILvdf", "ILas"))
grep("^IL.*", c("ILvdf", "ILas", "nhj"))
grep("^IL.*", c("ILvdf", "ILas", "nhj", "ilad", "aIL"))
colNames <- colnames(training)
colNames[grep("^IL.*", colNames),]
colNames[grep("^IL.*", colNames)]
trainingIL <- training[colNamesIL,]
colNamesIL <- colNames[grep("^IL.*", colNames)]
trainingIL <- training[colNamesIL,]
summary(trainingIL)
trainingIL <- training[,colNamesIL]
summary(trainingIL)
cor(trainingIL)
M <- abs(cor(trainingIL))
M
preProcess(log10(trainingIL + 1), method = "pca", pcaComp = 2)
preProcess(\trainingIL, method = "pca", pcaComp = 2)
preProcess(trainingIL, method = "pca", pcaComp = 2)
summary(preProc)
preProc <- preProcess(trainingIL, method = "pca", pcaComp = 2)
summary(preProc)
trainingIL
trainingIL <- training[,colNamesIL]
trainingIL
preProc <- preProcess(log10(trainingIL + 1), method = "pca", thresh = 0.9)
preProc <- preProcess(trainingIL, method = "pca", thresh = 0.9)
preProx
preProc
preProc <- preProcess(trainingIL, method = "pca")
preProc <- preProcess(trainingIL, method = "pca", pcaComp = 2)
preProcess(trainingIL, method = "pca", pcaComp = 2)
preProcess(trainingIL, method = "pca", thresh = 0.9)
colnames(training)
colNames[grep("(^IL.*)|^diagnosis", colnames(training))]
trainingIL <- training[,colNamesIL]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
colNamesIL <- colNames[grep("(^IL.*)|^diagnosis", colnames(training))]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
train(trainingIL$diagnosis ~ ., trainingIL, method = "glm")
colNamesIL <- colNames[grep("(^IL.*)", colnames(training))]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
train(training$diagnosis ~ ., trainingIL, method = "glm")
install.packages("e1071")
train(training$diagnosis ~ ., trainingIL, method = "glm")
summary(trainingIL)
train(training$diagnosis ~ ., trainingIL, method = "glm")
train(training$diagnosis ~ ., trainingIL, method="glm")
trainingIL
colNamesIL <- colNames[grep("(^IL.*)|^diagnosis", colnames(training))]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
train(trainingIL$diagnosis ~ ., trainingIL, method = "glm")
colNamesIL <- colNames[grep("(^IL.*)", colnames(training))]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
train(training$diagnosis ~ ., trainingIL, method = "glm")
train(training$diagnosis ~ ., trainingIL, method = "glm")
train(training$diagnosis ~ ., data = trainingIL, method = "glm")
summary(training)
summary(trainingIL)
train(training$diagnosis ~ ., data = trainingIL, method = "glm")
summary(training$diagnosis)
train(training$diagnosis ~ ., data = trainingIL, method = "glm")
train(training$diagnosis ~ ., data = trainingIL)
train(training$diagnosis ~ ., data = trainingIL, method = "glm")
train(training$diagnosis ~ IL_3, data = trainingIL, method = "glm")
x <- c(1:10)
y = 2 * x
train(y ~ x, method = "glm")
train(training$diagnosis ~ IL_3, data = trainingIL, method = "glm")
grep("^IL", colnames(training), value=TRUE,ignore.case=TRUE)
createSet <- function(ds){
IL_Colnames = grep("^IL", colnames(ds), value=TRUE,ignore.case=TRUE)
ds[,IL_Colnames]
}
trainingIL <- createSet(training)
testingIL <- createSet(testing)
model_no_pca <- train(training$diagnosis ~ ., trainingIL, method="glm")
str (training)
str(trainingIL)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colNamesIL <- colNames[grep("^IL.*", colnames(training))]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
colNames   <- colnames(training)
colNamesIL <- colNames[grep("^IL.*", colNames)]
trainingIL <- training[,colNamesIL]
testingIL  <- testing[,colNamesIL]
train(trainingIL$diagnosis ~ ., trainingIL, method = "glm")
train(training$diagnosis ~ ., trainingIL, method = "glm")
?train
train(trainingIL, trainingIL$diagnosis, method = "glm")
nrow(trainingUL)
nrow(trainingIL)
nrow(training$diagnosis)
training
training$diagnosis
train(trainingIL, training$diagnosis, method = "glm")
train(training$diagnosis ~ ., trainingIL, method = "glm")
train(trainingIL, training$diagnosis, method = "glm")
model_all   <- train(trainingIL, training$diagnosis, method = "glm")
predict_all <- predict(model_all, testingIL)
result_all  <- confusionMatrix(testing$diagnosis, predict_all)
result_all
pca_obj      <- preProcess(trainingIL, method = "pca", thresh = 0.8)
training_pca <- predict(pca_obj, trainingIL)
training_pca <- predict(pca_obj, trainingIL)
testing_pca  <- predict(pca_obj, testingIL)
model_pca   <- train(training_pca, training$diagnosis, method = "glm")
predict_pca <- predict(model_pca, testing_pca)
result_pca  <- confusionMatrix(testing$diagnosis, predict_pca)
result_pca
result_all$overall
result_all$overall$Accuracy
result_all$overall["Accuracy"]
cat("Accuracy using all vars, ", result_all$overall["Accuracy"])
cat("Accuracy using all vars: ", result_all$overall["Accuracy"])
cat("Accuracy using PCA: ", result_pca$overall["Accuracy"])
source('~/Documents/Data Science/08. Practical Machine Learning/Week 02/Quiz/Answer.Q5.R')
# Code supplied by the question
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
# Drawing the request chart
library(ggplot2)
library(Hmisc)
par(mar = rep(2, 4))
cols     <- colnames(training)
subCols  <- cols[-length(cols)] # Remove CompressiveStrength
plotCols <- 3
par(mfrow = c(ceil(length(subCols)/plotCols), plotCols))
res <- sapply(subCols, function(colName) {
cut <- cut2(training[,colName])
lab <- paste0("Index: ",colName)
plot(training$CompressiveStrength, pch=19, col=cut, xlab=lab, ylab="CompressiveStrength")
#ggplot() + geom_point(aes(training$CompressiveStrength, cut)) + xlab(colName)
})
library(shiny)
library(shiny)
library(shiny)
install.packages("shiny")
install.packages("miniUI")
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
pickXY()
pickXY(my_data)
pickXY(my_data)
pickXY(my_dat)
pickXY()
library(shiny)
library(miniUI)
pickXY <- function(data_frame) {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
install.packages("googleVis")
install.packages("plotly")
shiny::runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
x   <- iris$Sepal.Length
y   <- iris$Petal.Length
col <- iris$Species
plot(x = x, y = y, col = col, pch = 16,
xlab = "Sepal Length", ylab = "Petal Length",
xlim = c(4,8), ylim = c(1,7))
legend()
legend(7, 1)
?iris
unique(iris$Species)
legend(7, 1, legend = c("setosa", "versicolor", "virginica"))
legend(6, 3, legend = c("setosa", "versicolor", "virginica"))
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
legend(6, 3, legend = c("setosa", "versicolor", "virginica"))
library(RColorBrewer)
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
palette()
palette("black")
palette("set1")
palette("black", "red")
palette(c("black", "red"))
palette
palette()
palette(brewer.pal(3, "Set1"))
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
palette(brewer.pal(5, "Set1"))
plot(x = x, y = y, col = col, pch = 16,
xlab = "Sepal Length", ylab = "Petal Length",
xlim = c(4,8), ylim = c(1,7), pal = colorspl)
legend(7.4, 2.6, legend = unique(col), pch = 16, col = 1:length(col))
palette
palette()
plot(x = x, y = y, col = col, pch = 16,
xlab = "Sepal Length", ylab = "Petal Length",
xlim = c(4,8), ylim = c(1,7))
legend(7.4, 2.6, legend = unique(col), pch = 16, col = 1:length(col))
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
runApp('Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
install.packages("slidify")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
getwd()
setwd("~/Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny")
getwd()
author("Rodrigo Suzuki Okada")
?author
author("slides")
slidify("index.Rmd")
getwd()
setwd("~/Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny")
author("slides")
slidify("index.Rmd")
?iris
runApp('~/Documents/Data Science/09. Developing Data Products/Week 04/DataProducts_Week4_Shiny')
